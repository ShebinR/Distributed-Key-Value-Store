// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keyvaluestore.proto

#include "keyvaluestore.pb.h"
#include "keyvaluestore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* keyvaluestore_method_names[] = {
  "/keyvaluestore/get",
  "/keyvaluestore/put",
};

std::unique_ptr< keyvaluestore::Stub> keyvaluestore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< keyvaluestore::Stub> stub(new keyvaluestore::Stub(channel));
  return stub;
}

keyvaluestore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_(keyvaluestore_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_put_(keyvaluestore_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status keyvaluestore::Stub::get(::grpc::ClientContext* context, const ::GetRequest& request, ::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_, context, request, response);
}

void keyvaluestore::Stub::experimental_async::get(::grpc::ClientContext* context, const ::GetRequest* request, ::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void keyvaluestore::Stub::experimental_async::get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void keyvaluestore::Stub::experimental_async::get(::grpc::ClientContext* context, const ::GetRequest* request, ::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, reactor);
}

void keyvaluestore::Stub::experimental_async::get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetResponse>* keyvaluestore::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetResponse>::Create(channel_.get(), cq, rpcmethod_get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetResponse>* keyvaluestore::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GetResponse>::Create(channel_.get(), cq, rpcmethod_get_, context, request, false);
}

::grpc::Status keyvaluestore::Stub::put(::grpc::ClientContext* context, const ::PutRequest& request, ::PutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_put_, context, request, response);
}

void keyvaluestore::Stub::experimental_async::put(::grpc::ClientContext* context, const ::PutRequest* request, ::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

void keyvaluestore::Stub::experimental_async::put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

void keyvaluestore::Stub::experimental_async::put(::grpc::ClientContext* context, const ::PutRequest* request, ::PutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, reactor);
}

void keyvaluestore::Stub::experimental_async::put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::PutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PutResponse>* keyvaluestore::Stub::AsyncputRaw(::grpc::ClientContext* context, const ::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PutResponse>::Create(channel_.get(), cq, rpcmethod_put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PutResponse>* keyvaluestore::Stub::PrepareAsyncputRaw(::grpc::ClientContext* context, const ::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::PutResponse>::Create(channel_.get(), cq, rpcmethod_put_, context, request, false);
}

keyvaluestore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      keyvaluestore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< keyvaluestore::Service, ::GetRequest, ::GetResponse>(
          std::mem_fn(&keyvaluestore::Service::get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      keyvaluestore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< keyvaluestore::Service, ::PutRequest, ::PutResponse>(
          std::mem_fn(&keyvaluestore::Service::put), this)));
}

keyvaluestore::Service::~Service() {
}

::grpc::Status keyvaluestore::Service::get(::grpc::ServerContext* context, const ::GetRequest* request, ::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status keyvaluestore::Service::put(::grpc::ServerContext* context, const ::PutRequest* request, ::PutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


